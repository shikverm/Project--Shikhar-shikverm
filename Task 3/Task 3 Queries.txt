CREATE DATABASE onlinestore
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LOCALE_PROVIDER = 'libc'
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;



CREATE TABLE Customers ( 
    CUSTOMER_ID SERIAL PRIMARY KEY, 
    NAME VARCHAR(100) NOT NULL, 
    EMAIL VARCHAR(100) UNIQUE NOT NULL, 
    PHONE VARCHAR(20), 
    ADDRESS TEXT 
);

CREATE TABLE Products ( 
    PRODUCT_ID SERIAL PRIMARY KEY, 
    PRODUCT_NAME VARCHAR(100) NOT NULL, 
    CATEGORY VARCHAR(50) NOT NULL, 
    PRICE DECIMAL(10,2) NOT NULL, 
    STOCK INTEGER NOT NULL 
); 

CREATE TABLE Orders ( 
    ORDER_ID SERIAL PRIMARY KEY, 
    CUSTOMER_ID INTEGER REFERENCES Customers(CUSTOMER_ID), 
    PRODUCT_ID INTEGER REFERENCES Products(PRODUCT_ID), 
    QUANTITY INTEGER NOT NULL, 
    ORDER_DATE DATE DEFAULT CURRENT_DATE 
); 



INSERT INTO Customers (NAME, EMAIL, PHONE, ADDRESS) VALUES 
('John Doe', 'john@email.com', '555-0101', '123 Main St'), 
('Jane Smith', 'jane@email.com', '555-0102', '456 Oak Ave'), 
('Bob Wilson', 'bob@email.com', '555-0103', '789 Pine Rd'), 
('Alice Brown', 'alice@email.com', '555-0104', '321 Elm St'), 
('Charlie Davis', 'charlie@email.com', '555-0105', '654 Maple Dr');

INSERT INTO Products (PRODUCT_NAME, CATEGORY, PRICE, STOCK) VALUES 
('Laptop', 'Electronics', 999.99, 50), 
('Smartphone', 'Electronics', 699.99, 100), 
('Coffee Maker', 'Appliances', 79.99, 30), 
('Running Shoes', 'Sports', 89.99, 0), 
('Backpack', 'Accessories', 49.99, 75);

INSERT INTO Orders (CUSTOMER_ID, PRODUCT_ID, QUANTITY, ORDER_DATE) VALUES 
(1, 1, 1, '2024-01-15'), 
(2, 2, 2, '2024-02-01'), 
(3, 3, 1, '2024-03-10'), 
(1, 4, 1, '2024-03-15'), 
(2, 1, 1, '2024-04-01');



SELECT *
FROM orders
WHERE CUSTOMER_ID = 1;



SELECT PRODUCT_ID, PRODUCT_NAME, CATEGORY 
FROM Products 
WHERE STOCK = 0; 



WITH CTE AS(
	SELECT p.PRODUCT_ID,
		   p.PRICE,
	       CASE WHEN o.PRODUCT_ID IS NOT NULL THEN o.QUANTITY
		   ELSE 0
		   END as QUANTITY 
	FROM Products p 
	LEFT JOIN Orders o ON p.PRODUCT_ID = o.PRODUCT_ID
)
SELECT PRODUCT_ID, SUM(PRICE * QUANTITY)
FROM CTE
GROUP BY PRODUCT_ID; 



WITH calc_total_spent AS(
	SELECT o.customer_id, SUM(o.quantity * p.price) as total_spent
	FROM orders o join products p on o.product_id = p.product_id
	GROUP BY o.customer_id
),
calc_rank AS(
	SELECT *, RANK() OVER (ORDER BY total_spent DESC) AS rnk
	FROM calc_total_spent
)
SELECT customer_id
FROM calc_rank
WHERE rnk <=5



SELECT DISTINCT o.CUSTOMER_ID 
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID 
GROUP BY o.CUSTOMER_ID 
HAVING COUNT(DISTINCT p.CATEGORY) >= 2;



WITH calc_total_sale AS(
	SELECT TO_CHAR(ORDER_DATE, 'YYYY-MM') as yr_month, SUM(o.QUANTITY * p.PRICE) as total_sale
	FROM orders o left join products p
	ON o.product_id = p.product_id
	GROUP BY TO_CHAR(ORDER_DATE, 'YYYY-MM')
)
SELECT * FROM calc_total_sale
WHERE total_sale = (SELECT MAX(total_sale) from calc_total_sale)



SELECT p.PRODUCT_ID
FROM Products p 
LEFT JOIN (SELECT * from Orders WHERE ORDER_DATE > CURRENT_DATE - INTERVAL '6 months') o ON p.PRODUCT_ID = o.PRODUCT_ID 
WHERE o.ORDER_DATE IS NULL;



SELECT c.*
FROM Customers c 
LEFT JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID 
WHERE o.CUSTOMER_ID IS NULL; 



SELECT CAST(AVG(order_value) AS NUMERIC(10,2)) as AVERAGE_ORDER_VALUE 
FROM ( 
    SELECT o.ORDER_ID,  
           (o.QUANTITY * p.PRICE) as order_value 
    FROM Orders o 
    JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID 
);